@*
    Componente padre
    Llama a ConfigurePizzaDialog (componente hijo) con un atributo local (PizzaSpecial) -> Share by parameters
    Y modifica su comportamiento a partir del servicio inyectado (OrderState)           ->  Share by appstate
    En un parent component se inicializan los componentes hijos con sus parámetros.
    tag: Parent component
*@
@page "/"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@using System.Net.Http.Json
@using BlazingPizza.Data
@layout MainLayout
@*<TopBar/>*@

<div class="main">
  <h1>Blazing Pizzas</h1>
  <ul class="pizza-cards">
    @if (specials != null)
    {
      @foreach (var special in specials)
      {
        <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
          <div class="pizza-info">
              <span class="title">@special.Name</span>
                  @special.Description
                <span class="price">@special.GetFormattedBasePrice()</span>
          </div>
        </li> 

      }
    }
  </ul>
</div>
 @* <div class="main">
      <Pizzas/>
  </div>*@

 @if (OrderState.ShowingConfigureDialog)
 {
     <ConfigurePizzaDialog 
        Pizza="OrderState.ConfiguringPizza"
        OnCancel="OrderState.CancelConfigurePizzaDialog"          
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog"
     />
 }
 <div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
              <div class="cart-item">
                  <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                  <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                  <div class="item-price">
                      @configuredPizza.GetFormattedTotalPrice()
                  </div>
              </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>
  
@code {
        List<PizzaSpecial> specials = new();

    

          protected override async Task OnInitializedAsync()
          {
              specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
          }

          Order order => OrderState.Order;
        }